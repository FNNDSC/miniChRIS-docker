# an ephemeral instance of ChRIS backend services for local development
#
# warning: /var/run/docker.sock is mounted into some services (notably pman)

version: '3.9'

services:
  chrisomatic:
    image: ghcr.io/fnndsc/chrisomatic:0.5.0
    networks:
      - local
    volumes:
      - "./chrisomatic.yml:/chrisomatic.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
    userns_mode: host
    depends_on:
      - chris
    profiles:
      - tools
  chris:
    container_name: chris
    image: ghcr.io/fnndsc/cube:4.0.0
    ports:
      - "8000:8000"
    depends_on:
      - chris_db
      - swift
      - queue
    networks:
      - local
    env_file: secrets.env
    environment:
      DJANGO_DB_MIGRATE: "on"
      DJANGO_COLLECTSTATIC: "on"
    labels:
      org.chrisproject.role: "ChRIS_ultron_backEnd"
      org.chrisproject.miniChRIS: "miniChRIS"
  worker:
    image: ghcr.io/fnndsc/cube:4.0.0
    command: celery -A core worker -c 4 -l info -Q main1,main2
    env_file: secrets.env
    environment:
      DJANGO_DB_MIGRATE: "off"
      DJANGO_COLLECTSTATIC: "off"
    depends_on:
      - chris_db
      - swift
      - queue
      - pfcon
    restart: on-failure
    networks:
      - local
  worker_periodic:
    image: ghcr.io/fnndsc/cube:4.0.0
    environment:
      DJANGO_DB_MIGRATE: "off"
      DJANGO_COLLECTSTATIC: "off"
    command: celery -A core worker -c 2 -l info -Q periodic
    env_file: secrets.env
    depends_on:
      - chris_db
      - queue
    restart: on-failure
    networks:
      - local
  scheduler:
    image: ghcr.io/fnndsc/cube:4.0.0
    command: celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file: secrets.env
    environment:
      DJANGO_DB_MIGRATE: "off"
      DJANGO_COLLECTSTATIC: "off"
    depends_on:
      - chris_db
      - queue
    restart: on-failure
    networks:
      - local
  chris_db:
    image: docker.io/library/postgres:13
    env_file: secrets.env
    restart: on-failure
    volumes:
      - chris_db_data:/var/lib/postgresql
    networks:
      - local
  queue:
    image: docker.io/library/rabbitmq:3
    restart: on-failure
    networks:
      - local

  swift:
    image: docker.io/fnndsc/docker-swift-onlyone:latest
    init: true
    environment:
      - SWIFT_USERNAME=chris:chris1234
      - SWIFT_KEY=testing
    ports:
      - "8080:8080"
    volumes:
      - swift_storage:/srv
    networks:
      - local

  pfcon:
    container_name: pfcon
    image: ghcr.io/fnndsc/pfcon:5.0.0
    environment:
      COMPUTE_SERVICE_URL: http://pman:5010/api/v1/
      SECRET_KEY: secret
      PFCON_USER: pfcon
      PFCON_PASSWORD: pfcon1234
    ports:
      - "5005:5005"
    volumes:
      - remote:/var/local/storeBase
    networks:
      local:
        aliases:
          - pfcon.host
      remote:
    labels:
      org.chrisproject.role: "pfcon"
    user: "10100"

  pman:
    image: ghcr.io/fnndsc/pman:5.0.0.a5
    container_name: pman
    environment:
      CONTAINER_ENV: docker
      CONTAINER_USER: "10100:"
      ENABLE_HOME_WORKAROUND: "yes"
      JOB_LABELS: "org.chrisproject.miniChRIS=plugininstance"
      SECRET_KEY: secret
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
    depends_on:
      - pfcon
    ports:
      - "5010:5010"
    networks:
      - remote
    userns_mode: "host"
    labels:
      org.chrisproject.role: "pman"

  chris_ui:
    image: ghcr.io/fnndsc/chris_ui:20230725.258-605dfccf
    command: sirv --host --single
    environment:
      REACT_APP_CHRIS_UI_URL: http://localhost:8000/api/v1/
      REACT_APP_PFDCM_URL: http://localhost:4005/
    ports:
      - "8020:3000"

  orthanc:
    image: docker.io/jodogne/orthanc-plugins:1.11.0
    volumes:
      - ./orthanc.json:/etc/orthanc/orthanc.json:ro
      - orthanc:/var/lib/orthanc/db
    ports:
      - "4242:4242"
      - "8042:8042"
    networks:
      - pacs

  pfdcm:
    image: ghcr.io/fnndsc/pfdcm:3.0.14
    container_name: pfdcm
    volumes:
      - pfdcm:/home/dicom:rw
      - ./pfdcm-services:/home/dicom/services:ro
    ports:
      - "4005:4005"
    networks:
      - pacs
      - local
    user: "10100"

  pfdcm-listener:
    image: ghcr.io/fnndsc/pypx-listener:0.4.0
    volumes:
      - pfdcm:/home/dicom:rw
    networks:
      - pacs
    user: "10100"
    restart: on-failure
    logging:
      driver: fluentd
      options:
        tag: rx-repack
    depends_on:
      - pfdcm-nonroot-user-volume-fix
      - fluentbit


  # Non-root container user workarounds

  pfdcm-nonroot-user-volume-fix:
    image: docker.io/library/alpine:latest
    volumes:
      - pfdcm:/home/dicom:rw
    user: root
    command: chown 10100 /home/dicom
    restart: "no"

  pfcon-nonroot-user-volume-fix:
    image: docker.io/library/alpine:latest
    volumes:
      - remote:/var/local/storeBase:rw
    user: root
    command: chown 10100 /var/local/storeBase
    restart: "no"

  # ====================
  # Monitoring
  # ====================

  grafana:
    image: docker.io/grafana/grafana-oss:9.0.7
    ports:
      - 9009:3000
    depends_on:
      - chris_db
      - prometheus
    restart: unless-stopped
    networks:
      local:
      monitoring:
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana.ini:/etc/grafana/grafana.ini:ro
    profiles:
      - observability
  prometheus:
    image: quay.io/prometheus/prometheus:v2.37.0
    ports:
     - 9090:9090
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    restart: unless-stopped
    networks:
      monitoring:
    depends_on:
      - cadvisor
    profiles:
      - observability
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.45.0
    ports:
      - 9008:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk/:ro
    devices:
      - /dev/kmsg
    privileged: true
    userns_mode: host
    networks:
      monitoring:
    restart: unless-stopped
    profiles:
      - observability
  openobserve:
    image: public.ecr.aws/zinclabs/openobserve:v0.5.1
    ports:
      - 5080:5080
    volumes:
      - openobserve_data:/data:rw
    environment:
      ZO_DATA_DIR: /data
      ZO_ROOT_USER_EMAIL: "dev@babymri.org"
      ZO_ROOT_USER_PASSWORD: "chris1234"
    restart: unless-stopped
    networks:
      monitoring:
    profiles:
      - observability

  # Based on:
  # https://kevcodez.de/posts/2019-08-10-fluent-bit-docker-logging-driver-elasticsearch/
  # https://www.velebit.ai/blog/tech-blog-collecting-logs-in-docker-clusters/
  # must not be part of the "observability" profile because it's used as a log driver
  fluentbit:
    image: cr.fluentbit.io/fluent/fluent-bit:2.1.8
    command: /fluent-bit/bin/fluent-bit -c /fluent-bit/etc/fluent-bit.conf --enable-hot-reload
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./observability/fluent-bit:/fluent-bit/etc:ro
    networks:
      monitoring:

networks:
  local:
  remote:
  pacs:
  monitoring:

volumes:
  chris_db_data:
  swift_storage:
  remote:
  orthanc:
  pfdcm:
  grafana_data:
  openobserve_data:
